{"version":3,"sources":["theme.js","components/location.js","components/weather.js","components/hourWeather.js","services/osmLocation.js","services/weatherAPI.js","services/currentLocationAPI.js","utils/hourlyForecast.js","containers/Location.js","App.js","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","useStyles","makeStyles","root","flexGrow","padding","paper","spacing","textAlign","Location","locationName","country","weatherInfo","classes","dateObjDay","moment","localTime","format","dateObjTime","Container","fixed","className","Typography","variant","align","city","countryCode","timeZone","tempDegree","description","src","icon","alt","backgroundColor","flexContainer","display","flexDirection","Weather","wind","snow","rain","sunrise","sunset","clouds","Fragment","Paper","List","Grid","container","xs","ListItem","ListItemIcon","ListItemText","primary","secondary","flexWrap","justifyContent","borderRadius","gridList","transform","title","color","HourlyWeatherData","hourly","console","log","GridList","cols","map","hours","index","timeObj","type","width","condition","temp_c","getGeoLocation","a","geoAPI","axios","get","geoLocations","getWeatherData","options","method","url","request","getCurrentLocation","lat","lon","currentLocation","data","DATE_TIME_SUNRISE_SUNSET","getUpcoming24Hour","daysForecast","curDate","location","localtime","curHourObj","curHour","parseInt","currentDay","forecast","forecastday","hour","nextDay","currentDayTime","concat","slice","item","time","astro","curSunriseStr","curSunsetStr","curDateStr","date","nextSunriseStr","nextSunsetStr","nextDateStr","sunriseSunsets","Set","process","result","curTime","sunriseOrSunset","forEach","nextTime","curTime1HourLater","add","isBefore","isAfter","push","delete","props","componentDidMount","navigator","geolocation","getCurrentPosition","position","setState","isRequestState","latitude","coords","longitude","searchValue","weather","dateData","weatherDescription","current","day","avgtemp_c","tempFahren","avgtemp_f","cloud","daily_chance_of_snow","daily_chance_of_rain","maxwind_mph","text","countryName","timezone","isLocationFound","err","renderData","state","address","country_code","tz_id","handleClick","length","alert","this","style","value","placeholder","onChange","newValue","onRequestSearch","LinearProgress","fontSize","React","Component","withStyles","search","margin","height","marginTop","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9254623.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {},\r\n});\r\nexport default theme;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: '30px',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(4),\r\n    textAlign: 'start',\r\n  },\r\n}));\r\n\r\nfunction Location({ locationName, country, weatherInfo }) {\r\n  const classes = useStyles();\r\n  const dateObjDay = moment(weatherInfo.localTime).format('dddd Do MMMM YYYY');\r\n  const dateObjTime = moment(weatherInfo.localTime).format('HH:mm a');\r\n\r\n  return (\r\n    <Container fixed className={classes.root}>\r\n      <Typography variant='h4' align='start'>\r\n        {locationName.city} <LocationCityIcon />\r\n      </Typography>\r\n      <Typography variant='h4' align='start'>\r\n        {country.country}({country.countryCode})\r\n      </Typography>\r\n      <Typography variant='h4' align='start'>\r\n        {country.timeZone}\r\n      </Typography>\r\n      <Typography variant='h4' align='start'>\r\n        {dateObjDay}\r\n      </Typography>\r\n      <Typography variant='h4' align='start'>\r\n        {dateObjTime}\r\n      </Typography>\r\n      <Typography variant='h1' align='start'>\r\n        {weatherInfo.tempDegree}\r\n        <span>&deg;C</span>\r\n      </Typography>\r\n      <Typography variant='h4' align='start'>\r\n        {weatherInfo.description}\r\n      </Typography>\r\n      <Typography variant='h4' align='start'>\r\n        <img src={weatherInfo.icon} alt='icon' />\r\n      </Typography>\r\n    </Container>\r\n  );\r\n}\r\nexport default Location;\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AcUnitTwoToneIcon from '@material-ui/icons/AcUnitTwoTone';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport { Grid } from '@material-ui/core';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\nimport WbSunnycon from '@material-ui/icons/WbSunny';\r\nimport CloudRoundedIcon from '@material-ui/icons/CloudRounded';\r\nimport BeachAccessRoundedIcon from '@material-ui/icons/BeachAccessRounded';\r\nimport WavesRoundedIcon from '@material-ui/icons/WavesRounded';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: '#fafafa',\r\n  },\r\n\r\n  flexContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    padding: 0,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction Weather({ wind, snow, rain, sunrise, sunset, clouds, className }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper className={`${classes.root} ${className}`}>\r\n        <List className='flexContainer'>\r\n          <Grid container>\r\n            <Grid xs={6}>\r\n              <ListItem>\r\n                <ListItemIcon>\r\n                  <WavesRoundedIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary='Wind' secondary={`${wind}mph`} />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemIcon>\r\n                  <AcUnitTwoToneIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary='Snow' secondary={`${snow}%`} />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemIcon>\r\n                  <BeachAccessRoundedIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary='Rain' secondary={`${rain}%`} />\r\n              </ListItem>\r\n            </Grid>\r\n\r\n            <Grid xs={6}>\r\n              <ListItem>\r\n                <ListItemIcon>\r\n                  <WbSunnycon />\r\n                </ListItemIcon>\r\n                <ListItemText primary='Sunrise' secondary={`${sunrise}`} />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemIcon>\r\n                  <Brightness4Icon />\r\n                </ListItemIcon>\r\n                <ListItemText primary='Sunset' secondary={`${sunset}`} />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemIcon>\r\n                  <CloudRoundedIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary='Clouds' secondary={`${clouds}%`} />\r\n              </ListItem>\r\n            </Grid>\r\n          </Grid>\r\n        </List>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Weather;\r\n","import GridList from '@material-ui/core/GridList';\r\nimport GridTile from '@material-ui/core/GridListTile';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    backgroundColor: '#fafafa',\r\n    borderRadius: '25px',\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    transform: 'translateZ(0)',\r\n  },\r\n  title: {\r\n    color: theme.palette.primary,\r\n  },\r\n}));\r\n\r\nfunction HourlyWeatherData({ hourly }) {\r\n  const classes = useStyles();\r\n  console.log({ hourly });\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList className={classes.gridList} cols={14} spacing={3}>\r\n        {hourly.map((hours, index) => {\r\n          return (\r\n            <GridTile key={index} className={classes.title}>\r\n              <h2>{hours.timeObj.format('HH:mm')}</h2>\r\n              {hours.type === 'Sunset' || hours.type === 'Sunrise' ? (\r\n                <h2>\r\n                  <img src={hours.icon} alt='icon' width='50%' />\r\n                </h2>\r\n              ) : (\r\n                <h2>\r\n                  <img src={hours?.condition?.icon} alt='icon' width='50%' />\r\n                </h2>\r\n              )}\r\n\r\n              {hours.temp_c ? (\r\n                <h2>\r\n                  {hours.temp_c}\r\n                  <span>&deg;C</span>\r\n                </h2>\r\n              ) : (\r\n                <h2>{hours.type}</h2>\r\n              )}\r\n            </GridTile>\r\n          );\r\n        })}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HourlyWeatherData;\r\n","import axios from \"axios\";\r\n\r\nasync function getGeoLocation(locationName){\r\n    const geoAPI = `https://nominatim.openstreetmap.org/search?q=${locationName}&format=json&polygon=1&addressdetails=1`;\r\n      const geoLocations = await axios.get(geoAPI);\r\n     return geoLocations;\r\n}\r\nexport {getGeoLocation};","import axios from \"axios\";\r\n\r\nasync function getWeatherData(locationName) {\r\n\r\n  const options = {\r\n    method: \"GET\",\r\n    url: `https://api.weatherapi.com/v1/forecast.json?key=6124b5ab6dd44fdcb3b84806211203&q=${locationName}&days=5&aqi=no&alerts=no`,\r\n    \r\n  };\r\n\r\n  const weatherInfo = await axios.request(options);\r\n  return weatherInfo;\r\n}\r\n\r\nexport { getWeatherData };\r\n","import axios from \"axios\";\r\n\r\nasync function getCurrentLocation(lat, lon) {\r\n  const currentLocation = await axios.get(\r\n    `https://api.bigdatacloud.net/data/reverse-geocode-client?${lat}&${lon}&localityLanguage=en`\r\n  );\r\n  return currentLocation.data;\r\n}\r\n\r\nexport { getCurrentLocation };\r\n","import moment from 'moment';\r\n\r\n\r\nconst DATE_TIME_FORMATE = 'YYYY-MM-DD HH:mm';\r\n\r\nconst DATE_TIME_SUNRISE_SUNSET = 'YYYY-MM-DD HH:mm A';\r\n\r\nfunction getUpcoming24Hour(daysForecast) {\r\n  const curDate = daysForecast.location.localtime;\r\n  console.log({ curDate });\r\n  const curHourObj = moment(curDate);\r\n  const curHour = parseInt(curHourObj.format('HH'));\r\n  const currentDay = daysForecast.forecast.forecastday[0].hour;\r\n  const nextDay = daysForecast.forecast.forecastday[1].hour;\r\n  const currentDayTime = currentDay\r\n    .concat(nextDay)\r\n    .slice(curHour, curHour + 13)\r\n    .map((item) => {\r\n      return { ...item, timeObj: moment(item.time, DATE_TIME_FORMATE) };\r\n    });\r\n\r\n  const {\r\n    astro: { sunrise: curSunriseStr, sunset: curSunsetStr },\r\n    date: curDateStr,\r\n  } = daysForecast.forecast.forecastday[0];\r\n  const {\r\n    astro: { sunrise: nextSunriseStr, sunset: nextSunsetStr },\r\n    date: nextDateStr,\r\n  } = daysForecast.forecast.forecastday[1];\r\n\r\n  const sunriseSunsets = new Set([\r\n    {\r\n      timeObj: moment(`${curDateStr} ${curSunriseStr}`, DATE_TIME_SUNRISE_SUNSET),\r\n      type: 'Sunrise',\r\n      icon: `${process.env.PUBLIC_URL}/images/sunrise.png`,\r\n    },\r\n    {\r\n      timeObj: moment(`${curDateStr} ${curSunsetStr}`, DATE_TIME_SUNRISE_SUNSET),\r\n      type: 'Sunset',\r\n      icon:\r\n      `${process.env.PUBLIC_URL}/images/sunset.png`,\r\n    },\r\n    {\r\n      timeObj: moment(`${nextDateStr} ${nextSunriseStr}`, DATE_TIME_SUNRISE_SUNSET),\r\n      type: 'Sunrise',\r\n      icon:\r\n      `${process.env.PUBLIC_URL}/images/sunrise.png`,\r\n    },\r\n    {\r\n      timeObj: moment(`${nextDateStr} ${nextSunsetStr}`, DATE_TIME_SUNRISE_SUNSET),\r\n      type: 'Sunset',\r\n      icon:\r\n      `${process.env.PUBLIC_URL}/images/sunset.png`,\r\n    },\r\n  ]);\r\n\r\n  console.log({ sunriseSunsets });\r\n\r\n  let result = [];\r\n  for (let hour of currentDayTime) {\r\n    const { timeObj: curTime } = hour;\r\n    let sunriseOrSunset = null;\r\n\r\n    sunriseSunsets.forEach((item) => {\r\n      const { timeObj: nextTime } = item;\r\n      const curTime1HourLater = moment(curTime).add(1, 'hours');\r\n      if (curTime.isBefore(nextTime) && curTime1HourLater.isAfter(nextTime)) {\r\n        sunriseOrSunset = item;\r\n      }\r\n    });\r\n    result.push(hour);\r\n    if (sunriseOrSunset) {\r\n      result.push(sunriseOrSunset);\r\n      sunriseSunsets.delete(sunriseOrSunset);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport { getUpcoming24Hour };\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SearchBar from 'material-ui-search-bar';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nimport LocationInfo from '../components/location';\r\nimport Weather from '../components/weather';\r\nimport HourlyWeather from '../components/hourWeather';\r\nimport { getGeoLocation } from '../services/osmLocation';\r\nimport { getWeatherData } from '../services/weatherAPI';\r\nimport { getCurrentLocation } from '../services/currentLocationAPI';\r\nimport { getUpcoming24Hour } from '../utils/hourlyForecast';\r\n\r\nconst useStyles = (theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: '#fafafa',\r\n  },\r\n  search: {\r\n    margin: theme.spacing(4),\r\n    width: '100%',\r\n  },\r\n  weather: {\r\n    height: '100%',\r\n    marginTop: '8px',\r\n    padding: '30px',\r\n  },\r\n  gridList: {\r\n    padding: '20px',\r\n    margin: '15px',\r\n  },\r\n});\r\n\r\nclass Location extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: ' ',\r\n      locationName: null,\r\n      weatherInfo: null,\r\n      country: null,\r\n      isLocationFound: false,\r\n      currentLocation: {},\r\n      isRequestState: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.currentLocation();\r\n  };\r\n\r\n  currentLocation = () => {\r\n    return navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        this.setState({ isRequestState: true });\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n\r\n        const currentLocation = await getCurrentLocation(latitude, longitude);\r\n        const weatherInfo = await getWeatherData(currentLocation.city);\r\n        this.setState({ searchValue: currentLocation.city });\r\n\r\n        const data = weatherInfo.data;\r\n        const weather = weatherInfo.data.forecast.forecastday[0];\r\n        const dateData = weatherInfo.data.location;\r\n        const weatherDescription = weatherInfo.data.current.condition;\r\n        const clouds = weatherInfo.data.current;\r\n\r\n        this.setState({\r\n          weatherInfo: {\r\n            tempDegree: weather.day.avgtemp_c,\r\n            tempFahren: weather.day.avgtemp_f,\r\n            clouds: clouds.cloud,\r\n            snow: weather.day.daily_chance_of_snow,\r\n            rain: weather.day.daily_chance_of_rain,\r\n            sunrise: weather.astro.sunrise,\r\n            sunset: weather.astro.sunset,\r\n            wind: weather.day.maxwind_mph,\r\n            localTime: dateData.localtime,\r\n            data,\r\n            description: weatherDescription.text,\r\n            icon: weatherDescription.icon,\r\n            weather,\r\n          },\r\n          country: {\r\n            country: currentLocation.countryName,\r\n            countryCode: currentLocation.countryCode,\r\n            timeZone: weather.timezone,\r\n          },\r\n          isLocationFound: true,\r\n          locationName: { city: currentLocation.city },\r\n          isRequestState: false,\r\n        });\r\n      },\r\n\r\n      (err) => console.log(err)\r\n    );\r\n  };\r\n\r\n  renderData = async (geoLocations) => {\r\n    const weatherInfo = await getWeatherData(this.state.searchValue);\r\n\r\n    const data = weatherInfo.data;\r\n    const location = geoLocations.data[0].address;\r\n    const weather = weatherInfo.data.forecast.forecastday[0];\r\n    const clouds = weatherInfo.data.current;\r\n    const weatherDescription = weatherInfo.data.current.condition;\r\n    const timeZone = weatherInfo.data.location;\r\n    const dateData = weatherInfo.data.location;\r\n    console.log({ data });\r\n\r\n    this.setState({\r\n      weatherInfo: {\r\n        tempDegree: weather.day.avgtemp_c,\r\n        tempFahren: weather.day.avgtemp_f,\r\n        clouds: clouds.cloud,\r\n        snow: weather.day.daily_chance_of_snow,\r\n        rain: weather.day.daily_chance_of_rain,\r\n        sunrise: weather.astro.sunrise,\r\n        sunset: weather.astro.sunset,\r\n        wind: weather.day.maxwind_mph,\r\n        description: weatherDescription.text,\r\n        icon: weatherDescription.icon,\r\n        localTime: dateData.localtime,\r\n        weather,\r\n        data: data,\r\n      },\r\n      country: {\r\n        country: location.country,\r\n        countryCode: location.country_code,\r\n        timeZone: timeZone.tz_id,\r\n      },\r\n      locationName: { city: location.city },\r\n      isLocationFound: true,\r\n      isRequestState: false,\r\n    });\r\n  };\r\n\r\n  handleClick = async () => {\r\n    if (this.state.searchValue.length > 1) {\r\n      this.setState({ isRequestState: true });\r\n      const geoLocations = await getGeoLocation(this.state.searchValue);\r\n\r\n      if (geoLocations.data.length > 0) {\r\n        this.renderData(geoLocations);\r\n      } else {\r\n        this.setState({\r\n          isLocationFound: false,\r\n          isRequestState: false,\r\n          weatherInfo: null,\r\n        });\r\n      }\r\n    } else {\r\n      alert('Please enter a City');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container>\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={8}>\r\n            <h1 style={{ textAlign: 'center', color: 'blue' }}>Just a click!! Weather is here.</h1>\r\n            <SearchBar\r\n              value={this.state.searchValue}\r\n              placeholder='City/Country'\r\n              onChange={(newValue) =>\r\n                this.setState({\r\n                  searchValue: newValue,\r\n                  weatherInfo: null,\r\n                  isLocationFound: true,\r\n                })\r\n              }\r\n              onRequestSearch={() => this.handleClick()}\r\n            />\r\n            {this.state.isRequestState && <LinearProgress color='primary' />}\r\n          </Grid>\r\n          <Grid item xs={2}></Grid>\r\n\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={4}>\r\n            {this.state.weatherInfo && (\r\n              <LocationInfo\r\n                country={this.state.country}\r\n                locationName={this.state.locationName}\r\n                weatherInfo={this.state.weatherInfo}\r\n              />\r\n            )}\r\n\r\n            {!this.state.isLocationFound && !this.state.weatherInfo && (\r\n              <div style={{ textAlign: 'start', fontSize: 'x-large' }}>\r\n                Please Enter a valid City/Location.\r\n              </div>\r\n            )}\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            {this.state.weatherInfo && (\r\n              <Weather {...this.state.weatherInfo} className={classes.weather} />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <div className={classes.gridList}>\r\n          {this.state.weatherInfo && (\r\n            <HourlyWeather\r\n              hourly={getUpcoming24Hour(this.state.weatherInfo.data)}\r\n              className={classes.gridList}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(Location);\r\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport theme from \"./theme\";\nimport Weather from \"./containers/Location\";\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n      <Weather/>\n  </ThemeProvider>\n);\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}